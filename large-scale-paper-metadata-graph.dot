digraph large_scale_paper_metadata {
/* graph properties */
graph [label_scheme=1];

/* edges */

/* topic hiearchy */
databases -> datastore
dfs -> datastore
kv_store -> datastore
graph_dbs -> datastore

graph_partitioning -> graph_dbs
graph_replication -> graph_dbs

/* papers to topics */
schism -> databases
dag_wt_t -> databases
sedge -> graph_replication
sedge -> graph_partitioning
spar -> graph_replication
spar -> graph_partitioning
map_reduce -> computational_model
hdfs -> dfs
gfs -> dfs
big_table -> kv_store
dynamo -> kv_store
dynamo -> merkle_tree
dynamo -> consistent_hashing

/* papers to papers */
map_reduce -> dfs[label=
  "for durable storage\n"
  + "and parallel reads"
  ]
big_table -> gfs[label="for durable available storage"]

/* descriptions to papers */
schism_desc -> schism
dag_wt_t_desc -> dag_wt_t
sedge_desc -> sedge
spar_desc -> spar
map_reduce_desc -> map_reduce
hdfs_desc -> hdfs
gfs_desc -> gfs
big_table -> big_table_desc
dynamo -> dynamo_desc
merkle_tree -> merkle_tree_desc
consistent_hashing -> consistent_hashing_desc



node [shape=box]; 

datastore[label="Datastores: put data, get data, update data"]

/* top level nodes */
databases[label="Relational Databases"]
graph_dbs[label="Graph Databases"]
dfs[label="Distributed File Systems"]
computational_model[label="Computational Model"]
kv_store[label="Key Value Store"]

/* 2nd level topics */ 

/* graph databases */
graph_partitioning [label="Graph Partitioning"]
graph_replication [label="Graph Replication"]

/* paper nodes */
node [shape=circle]; 
schism [label="Schism"]
dag_wt_t [label="DAG(WT)/(T) Replication Strategy"]
sedge[label="SEDGE: Complimentary Partitions\nand Dynamic Workload Partitions"]
spar[label="SPAR: Local Semantics\n(1-hop neighbours local)"]
map_reduce[label="MapReduce"]
hdfs[label="Hadoop Distributed Filesystem"]
gfs[label="Google File System"]
big_table[label="Big Table"]
dynamo[label="Dynamo"]
merkle_tree[label="Merkle Trees (Merkle '88)"]
consistent_hashing[label="Consistent Hashing (Karger '97)"]

/* description of paper nodes */
schism_desc [label=
    "assume: distd txn are short lived\n"
  + "problem: distd txn increase deadlocks increase latency\n"
  + "soln: build graph where node is row edge between each \n"
  + "      in the same txn.\n"
  + "      mimimize edge cut\n"
  + "      have decision tree learn partitioning\n"
  ]

dag_wt_t_desc [label=
    "problem: replication\n"
  + "  eager:  causes increased deadlocks\n"
  + "  lazy: is not 1 copy-serializable\n"
  + "soln: \n"
  + "  DAG(WT): send updates to your child in tree of copy graph\n"  
  + "  DAG(T): use timestamp and update msgs to guarentee total\n"  
  + "          ordering on updates"
  + "  Backedge: <NEED TO RE-READ"  
  ]

spar_desc[label=
    "Optimized for the social network use case\n"
  + "assume: most queries are 1 hop"
  + "problem: network hops over partition boundary\n"
  + "soln:  replicating so everything is local"
  ]

sedge_desc[label=
    "assume: large queries\n"
  + "problem: hits partition boundaries many times\n"
  + "soln: for graph, create multiple copies where\n"
  + "      partitioning does not overlap\n"
  + "      Also, create dynamic partitions based\n"
  + "      workload patterns\n"
  + "      Queries processed on copy least likely\n"
  + "      to cause network hops."
  ]

map_reduce_desc[label=
    "problem: writing distributed code is difficult\n"
  + "soln: express problem in terms of map reduce\n"
  + "  map: M splits of data run on M worker processes \n"
  + "       user code maps data to key,value\n"
  + "  reduce: R work processes copy M*R partitions, sort, groups by key \n"
  + "          user code take key and grouped value and produces a result"
  ]

hdfs_desc[label=
    "soln: data split into ~128MB blocks\n"
  + "  namenode: keeps fs heiarchy in memory\n"
  + "            keeps inode -> blocks in memory\n"
  + "    connects clients to datanodes to read and write blocks"
  + "  datanode: receives blocks from clients\n"
  + "    in pipeline, forwards data to replicas"
  ]


gfs_desc[label="similar to HDFS. to lazy to type"]

big_table_desc[label=
    "D9d sorted map built using a d9d B+-tree and using a d9d lock\n"
  + "for master selection and worker discovery. Has 'column families'\n"
  + "of a row stored seperately to optimize queries that work on a single fam"
  ]

dynamo_desc[label=
    "Consistent Hashing (CH) (partitioning) and Preference List (replication)\n"
  + "Uses CH, with two modificaiton. First instead of host mapping to circle,\n"
  + "a single host maps mulitple virtual nodes (for distributing load). 2nd,\n"
  + "k is not just belong to nj when between hash(nj-1) and hash(nj). It belongs\n"
  + "to all node inbetween hash(n(j-n)) to hash(nj). This is the 'preference list'\n"
  + "For key k, will have a 'preference list' of N replicas.\n"
  + "Hinted handoff and sloppy quorum\n"
  + "Write req can go to any of the N nodes that have the data. Forwarded to the\n"
  + "first N healthy nodes (sloppy quorum). Wait for W-1 responses. If N nodes not\n"
  + "in preference list, do 'hinted handoff' to those nodes and write intended dest.\n"
  + "hinted handoff host will eventually give it to intended destination.\n"
  + "Merkle Trees - Anti entropy\n"
  + "When writes cause sibling versions, merkle trees are used to discover them and\n"
  + "combine them.\n"
  + "Write buffer (decrease dura for decrease laten )\n"
  + "write to W-1 nodes, into memory but only 1 is a durable write. just wait for "
  + "response from all, no need to wait for the durabile write."
  ]


merkle_tree_desc[label=
    "leaves are the hashes of values, parents are the hashes of concat of children's hashes\n"
  + "can determine if two trees differnt O(1) by looking at root\n"
  + "can find single difference in O( lg (num_of_values) ) time\n"
  ]

consistent_hashing_desc[label=
  "take hashing functions range and have it loop back to the first value at the end\n"
  + "map host_id and key onto the circle. all keys that hash inbetween hash(h1) \n"
  + "and hash(h2) belong to h2. (Without lost of generality hash(h1) < hash(h2))\n"
  ]






} 

